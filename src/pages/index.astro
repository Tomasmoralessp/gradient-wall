---
import Layout from "../layouts/Layout.astro";
---

<Layout title="GradientWall">
  <main>
    <!-- Header -->
    <header
      id="header"
      class="dark:bg-slate-800 px-10 py-6 flex items-center fixed top-0 w-full justify-center gap-2 z-10"
    >
      <div class="flex text-white">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          class="size-6"
        >
          <path
            d="M5.625 3.75a2.625 2.625 0 1 0 0 5.25h12.75a2.625 2.625 0 0 0 0-5.25H5.625ZM3.75 11.25a.75.75 0 0 0 0 1.5h16.5a.75.75 0 0 0 0-1.5H3.75ZM3 15.75a.75.75 0 0 1 .75-.75h16.5a.75.75 0 0 1 0 1.5H3.75a.75.75 0 0 1-.75-.75ZM3.75 18.75a.75.75 0 0 0 0 1.5h16.5a.75.75 0 0 0 0-1.5H3.75Z"
          ></path>
        </svg>
      </div>
      <a href="#" class="text-base font-bold text-white flex">
        GradientWall®
      </a>
    </header>

    <!-- Expandible Section -->
    <section
      id="expandableSection"
      class="bg-black h-screen w-screen overflow-hidden text-center flex flex-col items-center absolute z-0"
    >
      <!-- Title -->
      <div id="titleBox" class="mt-24">
        <h2
          class="text-white text-lg font-medium bg-slate-600 p-4 rounded-full border-white border select-none"
        >
          Select two colors:
        </h2>
      </div>

      <!-- Gradient Box -->
      <div
        id="gradientBox"
        class="mt-8 w-7/12 h-4/6 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 rounded-es-full grid grid-rows-12 grid-cols-12 p-4"
      >
        <!-- Color Picker 1 -->
        <div
          class="h-12 w-12 shadow-md shadow-black flex justify-center items-center col-start-1 row-start-1"
        >
          <input
            type="color"
            id="color1"
            value="#4f46e5"
            class="w-full h-full hover:cursor-pointer"
          />
        </div>

        <!-- Expand Icon -->
        <svg
          id="expandGradient"
          class="h-12 bg-slate-200 rounded-md hover:bg-slate-900 hover:cursor-pointer hover:text-white justify-self-end shadow-md shadow-black col-start-12"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15"
          ></path>
        </svg>

        <!-- Color Picker 2 -->
        <div
          class="h-12 shadow-md shadow-black w-12 flex justify-center items-center self-end justify-self-end col-start-12 row-start-12"
        >
          <input
            type="color"
            id="color2"
            value="#ec4899"
            class="w-full h-full hover:cursor-pointer"
          />
        </div>
      </div>
    </section>
    <!-- Pop-Up Download Modal -->
    <div
      id="downloadPopup"
      class="fixed hidden inset-0 flex justify-center items-center bg-black/50 z-50"
    >
      <div class="bg-slate-400 py-8 px-14 rounded-full text-center">
        <p class="mb-4 mt-4 text-base text-gray-700 font-bold">
          Download generated wallpaper?
        </p>
        <button
          id="confirmDownload"
          onclick="Download"
          class="bg-slate-800 text-white px-6 py-2 rounded-full hover:bg-blue-500 border-white hover:border select-none"
          >Sí</button
        >
        <button
          id="cancelDownload"
          onclick="TODO"
          class="bg-gray-500 text-white px-6 py-2 rounded-full hover:bg-blue-500 ml-4 border-white hover:border select-none"
          >No</button
        >
      </div>
    </div>
    <!-- Pop-Up Space Info Modal -->
    <div
      id="infoPopup"
      class="fixed z-50 flex justify-center w-full bottom-0 hidden animate-bounce"
    >
      <div
        id="infoCard"
        class="bg-slate-600 py-6 px-32 mb-24 rounded-full text-white text-lg"
      >
        Press <strong> F11 </strong> to enter full mode screen
      </div>
    </div>
  </main>

  <!-- Script -->
  <script>
    const color1 = document.getElementById("color1");
    const color2 = document.getElementById("color2");
    const expandGradientButton = document.getElementById("expandGradient");
    const expandableSection = document.getElementById("expandableSection");
    const titleBox = document.getElementById("titleBox");
    const gradientBox = document.getElementById("gradientBox");
    const header = document.getElementById("header");
    const downloadPopup = document.getElementById("downloadPopup");
    const infoPoup = document.getElementById("infoPopup");
    const infoCard = document.getElementById("infoCard");
    const confirmDownload = document.getElementById("confirmDownload");
    const cancelDownload = document.getElementById("cancelDownload");

    [color1, color2].forEach((colorPicker) => {
      colorPicker.addEventListener("input", () => {
        const gradient = `linear-gradient(to right, ${color1.value}, ${color2.value})`;
        gradientBox.style.background = gradient;
      });
    });

    let isContentHidden = false; // Estado inicial

    expandGradientButton.addEventListener("click", (event) => {
      event.stopPropagation(); // Detiene la propagación del evento asegura que el cl en el botón no active el evento en su contenedor padre

      const gradient = `linear-gradient(to right, ${color1.value}, ${color2.value})`;

      if (!isContentHidden) {
        // Alterar el fondo para usar el gradiente definido
        expandableSection.classList.remove("bg-black");
        expandableSection.style.background = gradient;

        // Ocultar los elementos
        titleBox.classList.add("hidden");
        header.classList.add("hidden");
        gradientBox.classList.add("hidden");
        infoPoup.classList.remove("hidden");

        isContentHidden = true; // Actualizar el estado
      }
    });

    // Manejar el clic en la sección completa para restaurar
    expandableSection.addEventListener("click", () => {
      if (isContentHidden) {
        // Mostrar nuevamente los elementos
        titleBox.classList.remove("hidden");
        header.classList.remove("hidden");
        gradientBox.classList.remove("hidden");

        // Restaurar el fondo a negro
        expandableSection.style.background = "";
        expandableSection.classList.add("bg-black");

        // Escodner el Pop Up con información para descargar
        infoPoup.classList.add("hidden");

        isContentHidden = false; // Actualizar el estado

        // Mostrar información para que el usuario sepa que tiene que pulsar el SpaceBar
      }
    });

    // Al pulsar espacio mostramos el pop up para descargar el archivo
    document.addEventListener("keydown", async (event) => {
      if (event.code === "F11") {
        if (isContentHidden) {
          // Cambiar el contenido del info Pop Up para mostrar el siguiente paso
          // Press &#x2420 To Download
          infoCard.innerHTML = "Press &#x2420 To Download";
        }
      }

      if (event.code === "Space") {
        event.preventDefault();

        if (isContentHidden) {
          // Mostrar el Pop-up
          downloadPopup.classList.remove("hidden");
          infoPoup.classList.remove("animate-bounce");
          infoCard.classList.add("hidden");

          // Press &#x2420 To Download
        }
      }
    });

    // Manejar los botones del Download PopUp
    function Download() {
      // Call function to minimize the Download Pop Up
      // Download the wallpaper to the system
      // Minimize the Gradient Wall and comeback to the homepage
    }

    function Minimize() {
      // Minimize the Gradient Wall and comeback to the homepage
    }
  </script>
</Layout>
